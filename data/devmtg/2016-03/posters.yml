posters:
- title: 'ARCHER: Effectively Spotting Data Races in Large OpenMP Applications'
  speaker: Simone Atzeni (University of Utah), Ganesh Gopalakrishnan (University of Utah), Zvonimir Rakamaric (University of Utah), Dong H. Ahn (Lawrence Livermore National Laboratory), Ignacio Laguna (Lawrence Livermore National Laboratory), Martin Schulz (Lawrence Livermore National Laboratory), Gregory L. Lee (Lawrence Livermore National Laboratory)
  description: "Although the importance OpenMP as a parallel programming model and
    its adoption in Clang/LLVM is increasing (OpenMP 3.1 is now fully supported by Clang/LLVM
    3.7), existing data-race checkers for OpenMP have high overheads and generate
    many false positives. In this work, we propose the first OpenMP data race
    checker, ARCHER, that achieves high accuracy and low overheads on large OpenMP
    applications. Built on top of LLVM/Clang and the ThreadSanitizer (TSan) dynamic
    race checker, ARCHER incorporates scalable happens-before tracking, and
    exploits structured parallelism via combined static and dynamic analysis, and
    modularly interfaces with OpenMP runtimes. ARCHER significantly outperforms
    TSan and Intel Inspector XE, while providing the same or better precision. It
    has helped detect critical data races in the Hypre library that is central to
    many projects at the Lawrence Livermore National Laboratory (LLNL) and
    elsewhere."

- title: Design-space exploration of LLVM pass order with simulated annealing
  speaker: Nicholas Timmons (Cambridge University), David Chisnall (Cambridge University)
  description: "We undertook an automated design space exploration of the optimisation pass
    order and inliner thresholds in Clang using simulated annealing. It was
    performed separately on multiple input programs so that the results could be
    validated against each other. Superior configurations to the preset
    optimisation levels were found, such as those which produce similar run times
    to the presets whilst reducing build times, and those which offer improved
    run-time performance than the '-O3' optimisation level. Contrary to our
    expectation, we also found that the preset optimisation levels did not provide
    a uniform distribution in the tradeoff space between run and build-time
    performance."

- title: 'ConSerner: Compiler Driven Context Switches between Accelerators and CPUs'
  speaker: Ramy Gad (Johannes Gutenberg University), Tim Suess (University of Mainz), Andre Brinkmann (Johannes Gutenberg-Universität Mainz)
  description: "Computer systems provide different heterogeneous resources (e.g., GPUs, DSPs
    and FPGAs) that accelerate applications and that can reduce the energy
    consumption by using them. Usually, these resources have an isolated memory and
    a require target specific code to be written. There exist tools that can
    automatically generate target specific codes for program parts, so-called
    kernels. The data objects required for a target kernel execution need to be
    moved to the target resource memory. It is the programmers' responsibility to
    serialize these data objects used in the kernel and to copy them to or from the
    resource's memory. Typically, the programmer writes his own serializing
    function or uses existing serialization libraries. Unfortunately, both
    approaches require code modifications, and the programmer needs knowledge of
    the used data structure format. There is a need for a tool that is able to
    automatically extract the original kernel data objects, serialize them, and
    migrate them to a target resource without requiring intervention from the
    programmer."
    
- title: Evaluation of State-of-the-art Static Checkers for Detecting Objective-C Bugs in iOS Applications
  speaker: Thai San Phan (University of New South Wales), Yulei Sui (University of New South Wales)
  description: "The pervasive usage of mobile phone applications
    is now changing the way people use traditional software. Smartphone apps generated an impressive USD
    35 billion in full-year 2014, and in total 138 billion apps were
    downloaded in the year. The last few years have seen an unprecedented number
    of people rushing to develop mobile apps. Apple iOS has always played a major
    role in the smart-devices industry ever since the evolution of it. On average,
    around 45,000 newly developed apps are submitted for release to the iTunes
    App Store in 2014. Similar as desktop software, any mobile applications are
    prone to bugs and it is difficult to completely make them bug-free. As a
    fundamental tool to help programmers effectively locate program defects during
    compile time, static analysis approximates the runtime behaviour of a program
    without actually executing it. It is extremely helpful to catch bugs earlier during
    software development cycle before the produced is shipped in order to avoid
    high maintenance cost. This poster is hence to evaluate the state-of-the-art static
    checkers for detecting Objective-C bugs to systematically investigate the
    advantages and disadvantages of using different checkers on a wide variety bug
    patterns in iOS applications."

- title: Stack Size Estimation on Machine-Independent Intermediate Code for OpenCL Kernels
  speaker: Stefano Cherubin (Politecnico di Milano), Michele Scandale (Politecnico di Milano), Giovanni Agosta (Politecnico di Milano)
  description: "Stack size is an important factor in the mapping decision when dealing with
    embedded heterogeneous architectures, where fast memory is a scarce resource.
    Trying to map a kernel onto a device with insufficient memory may lead to
    reduced performance or even failure to run the kernel. OpenCL kernels are
    often compiled just-in-time, starting from the source code or an intermediate
    machine-independent representation. Precise stack size information, however,
    is only available in machine-dependent code. We provide a method for computing
    the stack size with sufficient accuracy on machine-independent code, given
    knowledge of the target ABI and register file architecture. This method can be
    applied to make mapping decisions early, thus avoiding to compile multiple
    times the code for each possible accelerator in a complex embedded
    heterogeneous system."

- title: "AAP: The Compiler Writer's Architecture from hell"
  speaker: Simon Cook (Embecosm), Edward Jones (Embecosm), Jeremy Bennett (Embecosm)
  description: "Contending with the blistering pace of LLVM advancement is a challenge for out
    of tree targets. Many out of tree targets, often for widely used embedded
    processors, have hardware features which are not well represented by the
    mainstream LLVM project."

- title: Automatic Identification of Accelerators for Hybrid HW-SW Execution
  speaker: Georgios Zacharopoulos (University of Lugano), Giovanni Ansaloni (University of Lugano), Laura Pozzi (University of Lugano)
  description: "While the number of transistors that can be put on a chip significantly
    increases, as suggested by Moore's law, the dark silicon problem rises. This
    is due to the power consumption not dropping at a corresponding rate, which
    generates overheating issues. Accelerator-enhanced architectures can provide an
    efficient solution to this and lead us to a hybrid HW-SW execution, where
    computationally intensive parts can be performed by custom hardware. An
    automation of this process is needed, so that applications in high-level
    languages can be mapped to hardware and software directly. The process needs,
    first, an automatic technique for identifying the parts of the computation that
    should be accelerated, and secondly, an automated way of synthesising these
    parts onto hardware. Under the scope of this paper, we are focusing on the
    first part of this process, and we present the automatic identification of the
    most computationally demanding parts, also known as custom instructions. The
    state-of-the-art identification approaches have certain limitations, as custom
    instruction selection is mostly performed within the scope of single Basic
    Blocks. We introduce a novel selection strategy, implemented within the LLVM
    framework, that carries out identification beyond the scope of a single Basic
    Block and identifies Regions within the Control Flow Graph, as subgraphs of it.
    Specific I/O constraints and area occupation metrics are taken into
    consideration, in order to obtain Regions that would provide maximum speedup,
    under architectural constraints, when transferred to hardware. For our final
    experimentation and evaluation phase, kernels from the signal and image
    processing domain are evaluated, and promising initial results show that the
    identification technique proposed is often capable of mimicking manual designer
    decisions."

- title: Static Analysis for Automated Partitioning of Single-GPU Kernels
  speaker: Alexander Matz (Ruprecht-Karls University of Heidelberg), Christoph Klein (Ruprecht-Karls University of Heidelberg), Holger Fröning (Ruprecht-Karls University of Heidelberg)
  description: "GPUs have established themselves in the computing landscape, convincing users
    and designers by their excellent performance and energy efficiency. They differ
    in many aspects from general-purpose CPUs, for instance their highly parallel
    architecture, their thread-collective bulk-synchronous execution model, and
    their programming model. Their use has been pushed by the introduction of
    data-parallel languages like CUDA or OpenCL."